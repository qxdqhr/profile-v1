'use client';

import React, { useState, useEffect } from 'react';
import { ArrowLeft, Settings, Database, Image, Tag, Save, RotateCcw, Plus, Edit, Trash2, ArrowUpDown, ShoppingCart } from 'lucide-react';
import { useMasterpiecesConfig } from '../../hooks/useMasterpiecesConfig';
import { ConfigFormData, CollectionFormData, ArtworkFormData, CollectionCategory, CollectionCategoryType, getAvailableCategories, getCategoryDisplayName } from '../../types';
import { UniversalImageUpload } from '../../components/UniversalImageUpload';
import { shouldUseUniversalFileService, getStorageModeDisplayName } from '../../services/fileService';
import { AuthGuard, AuthProvider } from '@/modules/auth';
import { CollectionOrderManagerV2 as CollectionOrderManager } from '../../components/CollectionOrderManagerV2';
import { ArtworkOrderManagerV2 as ArtworkOrderManager } from '../../components/ArtworkOrderManagerV2';
import { CartAdminPanel } from '../../components/CartAdminPanel';
import { useCartAdmin } from '../../hooks/useCartAdmin';

type TabType = 'general' | 'collections' | 'artworks' | 'carts';

function ConfigPageContent() {
  const {
    config,
    collections,
    categories,
    tags,
    loading,
    error,
    updateConfig,
    resetConfig,
    createCollection,
    updateCollection,
    deleteCollection,
    addArtworkToCollection,
    updateArtwork,
    deleteArtwork,
    refreshData,
  } = useMasterpiecesConfig();

  const [activeTab, setActiveTab] = useState<TabType>('general');
  const [selectedCollection, setSelectedCollection] = useState<number | null>(null);
  const [showCollectionForm, setShowCollectionForm] = useState(false);
  const [showArtworkForm, setShowArtworkForm] = useState(false);
  const [editingCollection, setEditingCollection] = useState<number | null>(null);
  const [editingArtwork, setEditingArtwork] = useState<{ collectionId: number; artworkId: number } | null>(null);
  const [showArtworkOrder, setShowArtworkOrder] = useState(false);
  const [showCollectionOrder, setShowCollectionOrder] = useState(false);

  // Ë¥≠Áâ©ËΩ¶ÁÆ°ÁêÜHook
  const {
    carts,
    stats,
    loading: cartLoading,
    error: cartError,
    refreshData: refreshCartData,
  } = useCartAdmin();

  // Ê£ÄÊü•ÊòØÂê¶‰ΩøÁî®ÈÄöÁî®Êñá‰ª∂ÊúçÂä°
  const [useUniversalService, setUseUniversalService] = useState<boolean>(false);
  const [storageModeDisplay, setStorageModeDisplay] = useState<string>('Ê£ÄÊü•‰∏≠...');

  // Âä†ËΩΩÊñá‰ª∂ÊúçÂä°ÈÖçÁΩÆ
  useEffect(() => {
    const loadFileServiceConfig = async () => {
      try {
        const shouldUse = await shouldUseUniversalFileService();
        const displayName = await getStorageModeDisplayName();
        setUseUniversalService(shouldUse);
        setStorageModeDisplay(displayName);
      } catch (error) {
        console.error('Âä†ËΩΩÊñá‰ª∂ÊúçÂä°ÈÖçÁΩÆÂ§±Ë¥•:', error);
        setUseUniversalService(false);
        setStorageModeDisplay('ÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•');
      }
    };
    loadFileServiceConfig();
  }, []);

  // ÈÖçÁΩÆË°®ÂçïÁä∂ÊÄÅ
  const [configForm, setConfigForm] = useState<ConfigFormData>({
    siteName: config?.siteName || '',
    siteDescription: config?.siteDescription || '',
    heroTitle: config?.heroTitle || '',
    heroSubtitle: config?.heroSubtitle || '',
    maxCollectionsPerPage: config?.maxCollectionsPerPage || 9,
    enableSearch: config?.enableSearch || true,
    enableCategories: config?.enableCategories || true,
    defaultCategory: config?.defaultCategory || 'all',
    theme: config?.theme || 'light',
    language: config?.language || 'zh',
  });

  // ÁîªÈõÜË°®ÂçïÁä∂ÊÄÅ
  const [collectionForm, setCollectionForm] = useState<CollectionFormData>({
    title: '',
    artist: '',
    coverImage: '',
    coverImageFileId: undefined,
    description: '',
    category: CollectionCategory.COLLECTION,
    tags: [],
    isPublished: true,
    price: undefined,
  });

  // ‰ΩúÂìÅË°®ÂçïÁä∂ÊÄÅ
  const [artworkForm, setArtworkForm] = useState<ArtworkFormData>({
    title: '',
    artist: '',
    image: '',
    description: '',
    createdTime: '',
    theme: '',
  });

  // Êõ¥Êñ∞ÈÖçÁΩÆË°®Âçï
  React.useEffect(() => {
    if (config) {
      setConfigForm({
        siteName: config.siteName,
        siteDescription: config.siteDescription || '',
        heroTitle: config.heroTitle,
        heroSubtitle: config.heroSubtitle || '',
        maxCollectionsPerPage: config.maxCollectionsPerPage,
        enableSearch: config.enableSearch,
        enableCategories: config.enableCategories,
        defaultCategory: config.defaultCategory,
        theme: config.theme,
        language: config.language,
      });
    }
  }, [config]);

  // ‰ΩúÂìÅÁÆ°ÁêÜtabËá™Âä®ÈÄâÊã©ÁîªÈõÜÈÄªËæë
  React.useEffect(() => {
    if (activeTab === 'artworks' && collections.length > 0) {
      // Ê£ÄÊü•ÂΩìÂâçÈÄâÊã©ÁöÑÁîªÈõÜÊòØÂê¶ËøòÂ≠òÂú®
      if (selectedCollection && !collections.find(c => c.id === selectedCollection)) {
        console.log('‚ö†Ô∏è [ÈÖçÁΩÆÈ°µÈù¢] ÂΩìÂâçÈÄâÊã©ÁöÑÁîªÈõÜÂ∑≤‰∏çÂ≠òÂú®ÔºåÈáçÁΩÆÈÄâÊã©');
        setSelectedCollection(null);
        setShowArtworkOrder(false);
        setShowArtworkForm(false);
        setEditingArtwork(null);
      }
      // Â¶ÇÊûúÁî®Êà∑Êú™ÈÄâÊã©ÁîªÈõÜÔºåËá™Âä®ÈÄâÊã©Á¨¨‰∏Ä‰∏™
      else if (!selectedCollection) {
        const firstCollection = collections[0];
        console.log('üéØ [ÈÖçÁΩÆÈ°µÈù¢] ‰ΩúÂìÅÁÆ°ÁêÜtabÈ¶ñÊ¨°ËøõÂÖ•ÔºåËá™Âä®ÈÄâÊã©Á¨¨‰∏Ä‰∏™ÁîªÈõÜ:', {
          selectedCollection: firstCollection.id,
          title: firstCollection.title
        });
        setSelectedCollection(firstCollection.id);
      }
      // Â¶ÇÊûúÁî®Êà∑Â∑≤ÈÄâÊã©‰∏îÁîªÈõÜÂ≠òÂú®Ôºå‰øùÁïôÁî®Êà∑ÈÄâÊã©
      else {
        const currentCollection = collections.find(c => c.id === selectedCollection);
        console.log('‚úÖ [ÈÖçÁΩÆÈ°µÈù¢] ‰øùÁïôÁî®Êà∑ÈÄâÊã©ÁöÑÁîªÈõÜ:', {
          selectedCollection: selectedCollection,
          title: currentCollection?.title
        });
      }
    }
  }, [activeTab, collections, selectedCollection]);

  // ÂΩìÁ¶ªÂºÄ‰ΩúÂìÅÁÆ°ÁêÜtabÊó∂ÔºåÈáçÁΩÆÁõ∏ÂÖ≥UIÁä∂ÊÄÅ‰ΩÜ‰øùÁïôÁî®Êà∑ÈÄâÊã©ÁöÑÁîªÈõÜ
  React.useEffect(() => {
    if (activeTab !== 'artworks') {
      // Âè™ÈáçÁΩÆUIÁä∂ÊÄÅÔºå‰øùÁïôselectedCollectionËÆ©Áî®Êà∑‰∏ãÊ¨°ËøõÂÖ•Êó∂ËøòËÉΩÁúãÂà∞‰πãÂâçÈÄâÊã©ÁöÑÁîªÈõÜ
      if (showArtworkOrder || showArtworkForm || editingArtwork) {
        console.log('üîÑ [ÈÖçÁΩÆÈ°µÈù¢] Á¶ªÂºÄ‰ΩúÂìÅÁÆ°ÁêÜtabÔºåÈáçÁΩÆUIÁä∂ÊÄÅ‰ΩÜ‰øùÁïôÁî®Êà∑ÈÄâÊã©');
        setShowArtworkOrder(false);
        setShowArtworkForm(false);
        setEditingArtwork(null);
      }
    }
  }, [activeTab, showArtworkOrder, showArtworkForm, editingArtwork]);

  // Â§ÑÁêÜÈÖçÁΩÆ‰øùÂ≠ò
  const handleSaveConfig = async () => {
    try {
      await updateConfig(configForm);
      alert('ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ');
    } catch (err) {
      alert('ÈÖçÁΩÆ‰øùÂ≠òÂ§±Ë¥•ÔºÅ');
    }
  };

  // Â§ÑÁêÜÈÖçÁΩÆÈáçÁΩÆ
  const handleResetConfig = async () => {
    if (confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆ‰∏∫ÈªòËÆ§ÈÖçÁΩÆÂêóÔºü')) {
      try {
        await resetConfig();
        alert('ÈÖçÁΩÆÈáçÁΩÆÊàêÂäüÔºÅ');
      } catch (err) {
        alert('ÈÖçÁΩÆÈáçÁΩÆÂ§±Ë¥•ÔºÅ');
      }
    }
  };

  // Â§ÑÁêÜÁîªÈõÜ‰øùÂ≠ò
  const handleSaveCollection = async () => {
    try {
      if (editingCollection) {
        await updateCollection(editingCollection, collectionForm);
        setEditingCollection(null);
      } else {
        await createCollection(collectionForm);
      }
      setShowCollectionForm(false);
      setCollectionForm({
        title: '',
        artist: '',
        coverImage: '',
        coverImageFileId: undefined,
        description: '',
        category: CollectionCategory.COLLECTION,
        tags: [],
        isPublished: true,
        price: undefined,
      });
      alert('ÁîªÈõÜ‰øùÂ≠òÊàêÂäüÔºÅ');
    } catch (err) {
      alert('ÁîªÈõÜ‰øùÂ≠òÂ§±Ë¥•ÔºÅ');
    }
  };

  // Â§ÑÁêÜ‰ΩúÂìÅ‰øùÂ≠ò
  const handleSaveArtwork = async () => {
    if (!selectedCollection) return;
    
    console.log('üìù [ÈÖçÁΩÆÈ°µÈù¢] ÂºÄÂßã‰øùÂ≠ò‰ΩúÂìÅ:', {
      isEditing: !!editingArtwork,
      selectedCollection,
      title: artworkForm.title,
      artist: artworkForm.artist,
      imagePresent: !!artworkForm.image,
      imageSize: artworkForm.image ? `${artworkForm.image.length} chars` : 'null'
    });
    
    try {
      if (editingArtwork) {
        console.log('‚úèÔ∏è [ÈÖçÁΩÆÈ°µÈù¢] ÊâßË°å‰ΩúÂìÅÊõ¥Êñ∞...', {
          collectionId: editingArtwork.collectionId,
          artworkId: editingArtwork.artworkId
        });
        await updateArtwork(editingArtwork.collectionId, editingArtwork.artworkId, artworkForm);
        setEditingArtwork(null);
        console.log('‚úÖ [ÈÖçÁΩÆÈ°µÈù¢] ‰ΩúÂìÅÊõ¥Êñ∞ÂÆåÊàê');
      } else {
        console.log('‚ûï [ÈÖçÁΩÆÈ°µÈù¢] ÊâßË°å‰ΩúÂìÅÂàõÂª∫...', {
          collectionId: selectedCollection
        });
        await addArtworkToCollection(selectedCollection, artworkForm);
        console.log('‚úÖ [ÈÖçÁΩÆÈ°µÈù¢] ‰ΩúÂìÅÂàõÂª∫ÂÆåÊàê');
      }
      
      console.log('üßπ [ÈÖçÁΩÆÈ°µÈù¢] Ê∏ÖÁêÜË°®ÂçïÁä∂ÊÄÅ...');
      setShowArtworkForm(false);
      setArtworkForm({
        title: '',
        artist: '',
        image: '',
        fileId: undefined,
        description: '',
        createdTime: '',
        theme: '',
      });
      
      alert('‰ΩúÂìÅ‰øùÂ≠òÊàêÂäüÔºÅ');
      console.log('üéâ [ÈÖçÁΩÆÈ°µÈù¢] ‰ΩúÂìÅ‰øùÂ≠òÊµÅÁ®ãÂÆåÊàê');
      
    } catch (err) {
      console.error('‚ùå [ÈÖçÁΩÆÈ°µÈù¢] ‰øùÂ≠ò‰ΩúÂìÅÊó∂ÂèëÁîüÈîôËØØ:', err);
      console.error('ÈîôËØØ‰∏ä‰∏ãÊñá:', {
        isEditing: !!editingArtwork,
        selectedCollection,
        artworkTitle: artworkForm.title,
        errorMessage: err instanceof Error ? err.message : 'Êú™Áü•ÈîôËØØ',
        stack: err instanceof Error ? err.stack : undefined
      });
      
      const errorMessage = err instanceof Error ? err.message : '‰ΩúÂìÅ‰øùÂ≠òÂ§±Ë¥•';
      alert(`‰ΩúÂìÅ‰øùÂ≠òÂ§±Ë¥•Ôºö${errorMessage}`);
    }
  };

  // ÁºñËæëÁîªÈõÜ
  const handleEditCollection = (collection: any) => {
    setCollectionForm({
      title: collection.title,
      artist: collection.artist,
      coverImage: collection.coverImage,
      coverImageFileId: collection.coverImageFileId || undefined,
      description: collection.description,
      category: (collection.category as CollectionCategoryType) || CollectionCategory.COLLECTION,
      tags: collection.tags || [],
      isPublished: collection.isPublished ?? true,
      price: collection.price,
    });
    setEditingCollection(collection.id);
    setShowCollectionForm(true);
  };

  // ÁºñËæë‰ΩúÂìÅ
  const handleEditArtwork = (collectionId: number, artwork: any) => {
    setArtworkForm({
      title: artwork.title,
      artist: artwork.artist,
      image: artwork.image,
      fileId: artwork.fileId,
      description: artwork.description,
      createdTime: artwork.createdTime,
      theme: artwork.theme,
    });
    setEditingArtwork({ collectionId, artworkId: artwork.id });
    setShowArtworkForm(true);
  };

  // ÂàáÊç¢‰ΩúÂìÅÊéíÂ∫èÊòæÁ§∫
  const handleToggleArtworkOrder = async () => {
    if (!selectedCollection) {
      alert('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ÁîªÈõÜ');
      return;
    }
    setShowArtworkOrder(!showArtworkOrder);
  };

  // ÂàáÊç¢ÁîªÈõÜÊéíÂ∫èÊòæÁ§∫
  const handleToggleCollectionOrder = async () => {
    setShowCollectionOrder(!showCollectionOrder);
  };

  // Âä†ËΩΩÁä∂ÊÄÅ
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-200">
        <div className="flex flex-col items-center justify-center min-h-[50vh] gap-4">
          <div className="w-10 h-10 border-4 border-slate-200 border-t-blue-500 rounded-full animate-spin"></div>
          <p className="text-slate-600">Âä†ËΩΩ‰∏≠...</p>
        </div>
      </div>
    );
  }

  // ÈîôËØØÁä∂ÊÄÅ
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-200">
        <div className="flex flex-col items-center justify-center min-h-[50vh] gap-4 p-4">
          <p className="text-red-600 text-lg">Âä†ËΩΩÂ§±Ë¥•Ôºö{error}</p>
          <button
            onClick={refreshData}
            className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors"
          >
            ÈáçËØï
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-200">
      {/* È°∂ÈÉ®ÂØºËà™ */}
      <div className="bg-white shadow-md border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center gap-8">
            <button
              onClick={() => window.history.back()}
              className="flex items-center gap-2 text-slate-500 bg-transparent border-none cursor-pointer text-base transition-colors hover:text-slate-800"
            >
              <ArrowLeft size={20} />
              <span>ËøîÂõû</span>
            </button>
            <div>
              <h1 className="text-2xl font-bold text-slate-800 m-0">ÁîªÈõÜÂ±ïËßàÈÖçÁΩÆÁÆ°ÁêÜ</h1>
              <p className="text-sm text-slate-500 m-0">ÁÆ°ÁêÜÂ±ïËßàÁöÑÊâÄÊúâÈÖçÁΩÆ„ÄÅÁîªÈõÜÂíå‰ΩúÂìÅ</p>
            </div>
          </div>
        </div>
      </div>

      {/* Ê†áÁ≠æÈ°µÂØºËà™ */}
      <div className="bg-white border-b border-slate-200">
        <div className="max-w-7xl mx-auto flex gap-0">
          <button
            className={`flex items-center gap-2 px-6 py-4 bg-transparent border-none cursor-pointer border-b-2 transition-colors ${
              activeTab === 'general' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-slate-600 hover:text-slate-800'
            }`}
            onClick={() => setActiveTab('general')}
          >
            <Settings size={18} />
            Âü∫Á°ÄÈÖçÁΩÆ
          </button>
          <button
            className={`flex items-center gap-2 px-6 py-4 bg-transparent border-none cursor-pointer border-b-2 transition-colors ${
              activeTab === 'collections' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-slate-600 hover:text-slate-800'
            }`}
            onClick={() => setActiveTab('collections')}
          >
            <Database size={18} />
            ÁîªÈõÜÁÆ°ÁêÜ
          </button>
          <button
            className={`flex items-center gap-2 px-6 py-4 bg-transparent border-none cursor-pointer border-b-2 transition-colors ${
              activeTab === 'artworks' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-slate-600 hover:text-slate-800'
            }`}
            onClick={() => setActiveTab('artworks')}
          >
            <Image size={18} />
            ‰ΩúÂìÅÁÆ°ÁêÜ
          </button>
          <button
            className={`flex items-center gap-2 px-6 py-4 bg-transparent border-none cursor-pointer border-b-2 transition-colors ${
              activeTab === 'carts' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-slate-600 hover:text-slate-800'
            }`}
            onClick={() => setActiveTab('carts')}
          >
            <ShoppingCart size={18} />
            Ë¥≠Áâ©ËΩ¶ÁÆ°ÁêÜ
          </button>
        </div>
      </div>

      {/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */}
      <div className="max-w-7xl mx-auto p-6">
        {/* Âü∫Á°ÄÈÖçÁΩÆÊ†áÁ≠æÈ°µ */}
        {activeTab === 'general' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-2xl font-bold text-slate-800 mb-2">Âü∫Á°ÄÈÖçÁΩÆ</h2>
                <p className="text-slate-600">ÈÖçÁΩÆÁΩëÁ´ôÁöÑÂü∫Êú¨‰ø°ÊÅØÂíåÊòæÁ§∫ÈÄâÈ°π</p>
              </div>
              <div className="flex gap-3">
                <button 
                  onClick={handleResetConfig} 
                  className="flex items-center gap-2 px-4 py-2 bg-slate-100 text-slate-700 border border-slate-300 rounded-lg font-medium hover:bg-slate-200 transition-colors"
                >
                  <RotateCcw size={16} />
                  ÈáçÁΩÆÈªòËÆ§
                </button>
                <button 
                  onClick={handleSaveConfig} 
                  className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white border border-blue-600 rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  <Save size={16} />
                  ‰øùÂ≠òÈÖçÁΩÆ
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">ÁΩëÁ´ôÂêçÁß∞</label>
                <input
                  type="text"
                  value={configForm.siteName}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, siteName: e.target.value }))}
                  placeholder="ËæìÂÖ•ÁΩëÁ´ôÂêçÁß∞"
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">ÁΩëÁ´ôÊèèËø∞</label>
                <textarea
                  value={configForm.siteDescription}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, siteDescription: e.target.value }))}
                  placeholder="ËæìÂÖ•ÁΩëÁ´ôÊèèËø∞"
                  rows={2}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">‰∏ªÊ†áÈ¢ò</label>
                <input
                  type="text"
                  value={configForm.heroTitle}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, heroTitle: e.target.value }))}
                  placeholder="ËæìÂÖ•‰∏ªÊ†áÈ¢ò"
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">ÂâØÊ†áÈ¢ò</label>
                <textarea
                  value={configForm.heroSubtitle}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, heroSubtitle: e.target.value }))}
                  placeholder="ËæìÂÖ•ÂâØÊ†áÈ¢ò"
                  rows={2}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">ÊØèÈ°µÊòæÁ§∫ÁîªÈõÜÊï∞Èáè</label>
                <input
                  type="number"
                  value={configForm.maxCollectionsPerPage}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, maxCollectionsPerPage: parseInt(e.target.value) }))}
                  min="1"
                  max="50"
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">‰∏ªÈ¢ò</label>
                <select
                  value={configForm.theme}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, theme: e.target.value as any }))}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="light">ÊµÖËâ≤</option>
                  <option value="dark">Ê∑±Ëâ≤</option>
                  <option value="auto">Ëá™Âä®</option>
                </select>
              </div>

              <div className="space-y-4">
                <label className="block text-sm font-medium text-slate-700">ËØ≠Ë®Ä</label>
                <select
                  value={configForm.language}
                  onChange={(e) => setConfigForm(prev => ({ ...prev, language: e.target.value as any }))}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="zh">‰∏≠Êñá</option>
                  <option value="en">English</option>
                </select>
              </div>

              <div className="space-y-4">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={configForm.enableSearch}
                    onChange={(e) => setConfigForm(prev => ({ ...prev, enableSearch: e.target.checked }))}
                    className="w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-slate-700">ÂêØÁî®ÊêúÁ¥¢ÂäüËÉΩ</span>
                </label>
              </div>

              <div className="space-y-4">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={configForm.enableCategories}
                    onChange={(e) => setConfigForm(prev => ({ ...prev, enableCategories: e.target.checked }))}
                    className="w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-slate-700">ÂêØÁî®ÂàÜÁ±ªÂäüËÉΩ</span>
                </label>
              </div>
            </div>

            {/* Êñá‰ª∂ÊúçÂä°‰ø°ÊÅØ */}
            <div className="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="text-lg font-semibold text-blue-800 mb-2">Êñá‰ª∂ÊúçÂä°Áä∂ÊÄÅ</h3>
              <p className="text-blue-700 mb-2">
                ÂΩìÂâç‰ΩøÁî®Ôºö<span className="font-medium">{storageModeDisplay}</span>
              </p>
              <p className="text-blue-600 text-sm">
                ÈÄöÁî®Êñá‰ª∂ÊúçÂä°Ôºö{useUniversalService ? 'Â∑≤ÂêØÁî®' : 'Êú™ÂêØÁî®'}
              </p>
            </div>
          </div>
        )}

        {/* ÁîªÈõÜÁÆ°ÁêÜÊ†áÁ≠æÈ°µ */}
        {activeTab === 'collections' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-800">ÁîªÈõÜÁÆ°ÁêÜ</h2>
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setCollectionForm({
                      title: '',
                      artist: '',
                      coverImage: '',
                      description: '',
                      category: CollectionCategory.COLLECTION,
                      tags: [],
                      isPublished: true,
                      price: undefined,
                    });
                    setEditingCollection(null);
                    setShowCollectionForm(true);
                  }}
                  className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white border border-blue-600 rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  <Plus size={16} />
                  Ê∑ªÂä†ÁîªÈõÜ
                </button>
                <button
                  onClick={() => handleToggleCollectionOrder()}
                  className="flex items-center gap-2 px-4 py-2 bg-slate-100 text-slate-700 border border-slate-300 rounded-lg font-medium hover:bg-slate-200 transition-colors"
                >
                  <ArrowUpDown size={16} />
                  {showCollectionOrder ? 'ÂÖ≥Èó≠ÊéíÂ∫è' : 'ÁîªÈõÜÊéíÂ∫è'}
                </button>
              </div>
            </div>

            {showCollectionOrder && (
              <div className="mb-6 p-6 bg-white rounded-lg shadow-sm border border-slate-200">
                <div className="mb-4">
                  <h3 className="text-xl font-semibold text-slate-800 mb-2">ÁîªÈõÜÊéíÂ∫èÁÆ°ÁêÜ</h3>
                  <p className="text-slate-600">
                    ÊãñÊãΩÊàñ‰ΩøÁî®ÊåâÈíÆË∞ÉÊï¥ÁîªÈõÜÂú®ÂâçÂè∞ÁöÑÊòæÁ§∫È°∫Â∫è
                  </p>
                </div>
                <CollectionOrderManager
                  onOrderChanged={() => {
                    console.log('üîÑ [ÈÖçÁΩÆÈ°µÈù¢] ÁîªÈõÜÈ°∫Â∫èÂ∑≤Êõ¥Êñ∞Ôºà‰ªÖÊéíÂ∫èÁïåÈù¢ÂÜÖÊõ¥Êñ∞Ôºâ');
                  }}
                />
              </div>
            )}

            {!showCollectionOrder && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {collections.map((collection) => (
                  <div key={collection.id} className="bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden hover:shadow-md transition-shadow">
                    <div className="h-48 bg-slate-100 overflow-hidden">
                      <img 
                        src={collection.coverImage} 
                        alt={collection.title} 
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div className="p-4">
                      <h3 className="text-lg font-semibold text-slate-800 mb-2">{collection.title}</h3>
                      <p className="text-slate-600 text-sm mb-1">‰ΩúËÄÖÔºö{collection.artist}</p>
                      <p className="text-slate-600 text-sm mb-1">ÂàÜÁ±ªÔºö{collection.category}</p>
                      <p className="text-slate-600 text-sm mb-1">‰ª∑Ê†ºÔºö{collection.price ? `¬•${collection.price}` : 'ÂÖçË¥π'}</p>
                      <p className="text-slate-600 text-sm mb-1">‰ΩúÂìÅÊï∞ÈáèÔºö{collection.pages.length}</p>
                      <p className="text-slate-600 text-sm mb-3">Áä∂ÊÄÅÔºö{collection.isPublished ? 'Â∑≤ÂèëÂ∏É' : 'ËçâÁ®ø'}</p>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleEditCollection(collection)}
                          className="flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 border border-blue-200 rounded text-sm hover:bg-blue-200 transition-colors"
                        >
                          <Edit size={14} />
                          ÁºñËæë
                        </button>
                        <button
                          onClick={() => {
                            if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÁîªÈõÜÂêóÔºü')) {
                              deleteCollection(collection.id);
                            }
                          }}
                          className="flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 border border-red-200 rounded text-sm hover:bg-red-200 transition-colors"
                        >
                          <Trash2 size={14} />
                          Âà†Èô§
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* ‰ΩúÂìÅÁÆ°ÁêÜÊ†áÁ≠æÈ°µ */}
        {activeTab === 'artworks' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-800">‰ΩúÂìÅÁÆ°ÁêÜ</h2>
              <div className="flex gap-3">
                <select
                  value={selectedCollection || ''}
                  onChange={(e) => setSelectedCollection(e.target.value ? parseInt(e.target.value) : null)}
                  className="px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">ÈÄâÊã©ÁîªÈõÜ</option>
                  {collections.map((collection) => (
                    <option key={collection.id} value={collection.id}>
                      {collection.title}
                    </option>
                  ))}
                </select>
                {selectedCollection && (
                  <>
                    <button
                      onClick={() => {
                        setArtworkForm({
                          title: '',
                          artist: '',
                          image: '',
                          description: '',
                          createdTime: '',
                          theme: '',
                        });
                        setEditingArtwork(null);
                        setShowArtworkForm(true);
                      }}
                      className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white border border-blue-600 rounded-lg font-medium hover:bg-blue-700 transition-colors"
                    >
                      <Plus size={16} />
                      Ê∑ªÂä†‰ΩúÂìÅ
                    </button>
                    <button
                      onClick={handleToggleArtworkOrder}
                      className="flex items-center gap-2 px-4 py-2 bg-slate-100 text-slate-700 border border-slate-300 rounded-lg font-medium hover:bg-slate-200 transition-colors"
                    >
                      <ArrowUpDown size={16} />
                      {showArtworkOrder ? 'ÂÖ≥Èó≠ÊéíÂ∫è' : '‰ΩúÂìÅÊéíÂ∫è'}
                    </button>
                  </>
                )}
              </div>
            </div>

            {selectedCollection && showArtworkOrder && (
              <div className="mb-6 p-6 bg-white rounded-lg shadow-sm border border-slate-200">
                <div className="mb-4">
                  <h3 className="text-xl font-semibold text-slate-800 mb-2">‰ΩúÂìÅÊéíÂ∫èÁÆ°ÁêÜ</h3>
                  <p className="text-slate-600">
                    ÊãñÊãΩÊàñ‰ΩøÁî®ÊåâÈíÆË∞ÉÊï¥‰ΩúÂìÅÂú®ÁîªÈõÜ‰∏≠ÁöÑÊòæÁ§∫È°∫Â∫è
                  </p>
                </div>
                <ArtworkOrderManager
                  collectionId={selectedCollection}
                  onOrderChanged={() => {
                    console.log('üîÑ [ÈÖçÁΩÆÈ°µÈù¢] ‰ΩúÂìÅÈ°∫Â∫èÂ∑≤Êõ¥Êñ∞Ôºà‰ªÖÊéíÂ∫èÁïåÈù¢ÂÜÖÊõ¥Êñ∞Ôºâ');
                  }}
                />
              </div>
            )}

            {selectedCollection && !showArtworkOrder && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {collections
                  .find(c => c.id === selectedCollection)
                  ?.pages.map((artwork) => (
                    <div key={artwork.id} className="bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden hover:shadow-md transition-shadow">
                      <div className="h-48 bg-slate-100 overflow-hidden">
                        {artwork.image && (
                          <img 
                            src={artwork.image} 
                            alt={artwork.title} 
                            className="w-full h-full object-cover"
                          />
                        )}
                      </div>
                      <div className="p-4">
                        <h4 className="text-lg font-semibold text-slate-800 mb-2">{artwork.title}</h4>
                        <p className="text-slate-600 text-sm mb-1">‰ΩúËÄÖÔºö{artwork.artist}</p>
                        <p className="text-slate-600 text-sm mb-1">Âàõ‰ΩúÊó∂Èó¥Ôºö{artwork.createdTime}</p>
                        <p className="text-slate-600 text-sm mb-1">‰∏ªÈ¢òÔºö{artwork.theme}</p>
                        <p className="text-slate-600 text-sm mb-3 line-clamp-2">{artwork.description}</p>
                        <div className="flex gap-2">
                          <button
                            onClick={() => handleEditArtwork(selectedCollection, artwork)}
                            className="flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 border border-blue-200 rounded text-sm hover:bg-blue-200 transition-colors"
                          >
                            <Edit size={14} />
                            ÁºñËæë
                          </button>
                          <button
                            onClick={() => {
                              if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰ΩúÂìÅÂêóÔºü')) {
                                deleteArtwork(selectedCollection, artwork.id);
                              }
                            }}
                            className="flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 border border-red-200 rounded text-sm hover:bg-red-200 transition-colors"
                          >
                            <Trash2 size={14} />
                            Âà†Èô§
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            )}
          </div>
        )}

        {/* Ë¥≠Áâ©ËΩ¶ÁÆ°ÁêÜÊ†áÁ≠æÈ°µ */}
        {activeTab === 'carts' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-800">Ë¥≠Áâ©ËΩ¶ÁÆ°ÁêÜ</h2>
              <p className="text-slate-600">Êü•ÁúãÊâÄÊúâÁî®Êà∑ÁöÑË¥≠Áâ©ËΩ¶Êï∞ÊçÆ</p>
            </div>
            <CartAdminPanel 
              carts={carts}
              stats={stats}
              loading={cartLoading}
              error={cartError}
              onRefresh={refreshCartData}
            />
          </div>
        )}
      </div>

      {/* ÁîªÈõÜË°®ÂçïÂºπÁ™ó */}
      {showCollectionForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-6 border-b border-slate-200">
              <h3 className="text-xl font-semibold text-slate-800">{editingCollection ? 'ÁºñËæëÁîªÈõÜ' : 'Ê∑ªÂä†ÁîªÈõÜ'}</h3>
              <button
                onClick={() => setShowCollectionForm(false)}
                className="text-slate-400 hover:text-slate-600 text-2xl font-bold leading-none"
              >
                √ó
              </button>
            </div>
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">Ê†áÈ¢ò</label>
                  <input
                    type="text"
                    value={collectionForm.title}
                    onChange={(e) => setCollectionForm(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="ËæìÂÖ•ÁîªÈõÜÊ†áÈ¢ò"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">‰ΩúËÄÖ</label>
                  <input
                    type="text"
                    value={collectionForm.artist}
                    onChange={(e) => setCollectionForm(prev => ({ ...prev, artist: e.target.value }))}
                    placeholder="ËæìÂÖ•‰ΩúËÄÖÂêçÁß∞"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <UniversalImageUpload
                    label="Â∞ÅÈù¢ÂõæÁâá"
                    value={collectionForm.coverImage}
                    fileId={collectionForm.coverImageFileId}
                    onChange={(data: { image?: string; fileId?: string }) => setCollectionForm(prev => ({ 
                      ...prev, 
                      coverImage: data.image || '',
                      coverImageFileId: data.fileId
                    }))}
                    placeholder="‰∏ä‰º†Â∞ÅÈù¢ÂõæÁâá"
                    businessType="cover"
                    showDebugInfo={true}
                    showTestButton={true}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">ÊèèËø∞</label>
                  <textarea
                    value={collectionForm.description}
                    onChange={(e) => setCollectionForm(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="ËæìÂÖ•ÁîªÈõÜÊèèËø∞"
                    rows={3}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">ÂàÜÁ±ª</label>
                  <select
                    value={collectionForm.category}
                    onChange={(e) => setCollectionForm(prev => ({ ...prev, category: e.target.value as CollectionCategoryType }))}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {getAvailableCategories().map((category) => (
                      <option key={category} value={category}>
                        {getCategoryDisplayName(category)}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">‰ª∑Ê†ºÔºàÂÖÉÔºâ</label>
                  <input
                    type="number"
                    value={collectionForm.price || ''}
                    onChange={(e) => setCollectionForm(prev => ({ 
                      ...prev, 
                      price: e.target.value ? parseInt(e.target.value) : undefined 
                    }))}
                    placeholder="ËæìÂÖ•‰ª∑Ê†ºÔºàÁïôÁ©∫Ë°®Á§∫ÂÖçË¥πÔºâ"
                    min="0"
                    step="1"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={collectionForm.isPublished}
                      onChange={(e) => setCollectionForm(prev => ({ ...prev, isPublished: e.target.checked }))}
                      className="w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-slate-700">ÂèëÂ∏ÉÁîªÈõÜ</span>
                  </label>
                </div>
              </div>
            </div>
            <div className="flex justify-end gap-3 p-6 border-t border-slate-200">
              <button
                onClick={() => setShowCollectionForm(false)}
                className="px-4 py-2 bg-slate-100 text-slate-700 border border-slate-300 rounded-lg font-medium hover:bg-slate-200 transition-colors"
              >
                ÂèñÊ∂à
              </button>
              <button
                onClick={handleSaveCollection}
                className="px-4 py-2 bg-blue-600 text-white border border-blue-600 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                ‰øùÂ≠ò
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‰ΩúÂìÅË°®ÂçïÂºπÁ™ó */}
      {showArtworkForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-6 border-b border-slate-200">
              <h3 className="text-xl font-semibold text-slate-800">{editingArtwork ? 'ÁºñËæë‰ΩúÂìÅ' : 'Ê∑ªÂä†‰ΩúÂìÅ'}</h3>
              <button
                onClick={() => setShowArtworkForm(false)}
                className="text-slate-400 hover:text-slate-600 text-2xl font-bold leading-none"
              >
                √ó
              </button>
            </div>
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">Ê†áÈ¢ò</label>
                  <input
                    type="text"
                    value={artworkForm.title}
                    onChange={(e) => setArtworkForm(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="ËæìÂÖ•‰ΩúÂìÅÊ†áÈ¢ò"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">‰ΩúËÄÖ</label>
                  <input
                    type="text"
                    value={artworkForm.artist}
                    onChange={(e) => setArtworkForm(prev => ({ ...prev, artist: e.target.value }))}
                    placeholder="ËæìÂÖ•‰ΩúËÄÖÂêçÁß∞"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <UniversalImageUpload
                    label="‰ΩúÂìÅÂõæÁâá"
                    value={artworkForm.image}
                    fileId={artworkForm.fileId}
                    onChange={(data: { image?: string; fileId?: string }) => setArtworkForm(prev => ({ 
                      ...prev, 
                      image: data.image,
                      fileId: data.fileId
                    }))}
                    placeholder="‰∏ä‰º†‰ΩúÂìÅÂõæÁâá"
                    businessType="artwork"
                    showDebugInfo={true}
                    showTestButton={true}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">ÊèèËø∞</label>
                  <textarea
                    value={artworkForm.description}
                    onChange={(e) => setArtworkForm(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="ËæìÂÖ•‰ΩúÂìÅÊèèËø∞"
                    rows={3}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">Âàõ‰ΩúÊó∂Èó¥</label>
                  <input
                    type="text"
                    value={artworkForm.createdTime}
                    onChange={(e) => setArtworkForm(prev => ({ ...prev, createdTime: e.target.value }))}
                    placeholder="ËæìÂÖ•Âàõ‰ΩúÊó∂Èó¥"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">‰∏ªÈ¢ò</label>
                  <input
                    type="text"
                    value={artworkForm.theme}
                    onChange={(e) => setArtworkForm(prev => ({ ...prev, theme: e.target.value }))}
                    placeholder="ËæìÂÖ•‰ΩúÂìÅ‰∏ªÈ¢ò"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>
            <div className="flex justify-end gap-3 p-6 border-t border-slate-200">
              <button
                onClick={() => setShowArtworkForm(false)}
                className="px-4 py-2 bg-slate-100 text-slate-700 border border-slate-300 rounded-lg font-medium hover:bg-slate-200 transition-colors"
              >
                ÂèñÊ∂à
              </button>
              <button
                onClick={handleSaveArtwork}
                className="px-4 py-2 bg-blue-600 text-white border border-blue-600 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                ‰øùÂ≠ò
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default function ConfigPage() {
  return (
    <AuthProvider>
      <AuthGuard>
        <ConfigPageContent />
      </AuthGuard>
    </AuthProvider>
  );
} 